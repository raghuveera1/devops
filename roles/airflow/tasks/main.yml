---
- name: Install postgresql
  include_tasks: 
    file: postgresql.yml
  when: 
    - airflow_environment_name == "prod" 
    - airflow_setup_state == "present"

- name: Create airflow home directory 
  file:
    path: "{{ airflow_home }}"
    state: directory
    mode: '0755'

- name: Set AIRFLOW_HOME environment variable
  lineinfile:
    dest: ~/.bashrc
    line: "export AIRFLOW_HOME={{ airflow_home }}"
    insertafter: EOF
    create: yes

- name: Get Python version
  shell: |
         python3 --version | cut -d " " -f 2 | cut -d "." -f 1-2
  register: _r_python_version

- set_fact:
   _f_airflow_python_version: "{% if airflow_python_version != '' %}{{ airflow_python_version }}{% else %}{{ _r_python_version.stdout }}{% endif %}"

- name: Install/Uninstall apache-airflow
  pip:
    name: "apache-airflow=={{ airflow_version }}"
    executable: pip3
    extra_args: "{% if airflow_setup_state == 'present' %}--constraint https://raw.githubusercontent.com/apache/airflow/constraints-{{ airflow_version }}/constraints-{{ _f_airflow_python_version }}.txt --ignore-installed{% endif %}"
    state: "{{ airflow_setup_state }}" 
  when: 
    - airflow_database_type == "sqllite" 

- name: Install/Uninstall apache-airflow
  pip:
    name: "apache-airflow[{{ airflow_database_type }}]=={{ airflow_version }}"
    executable: pip3
    extra_args: "{% if airflow_setup_state == 'present' %}--constraint https://raw.githubusercontent.com/apache/airflow/constraints-{{ airflow_version }}/constraints-{{ _f_airflow_python_version }}.txt --ignore-installed{% endif %}"
    state: "{{ airflow_setup_state }}"
  when:
    - airflow_database_type != "sqllite"
      
- name: Install/Uninstall apache-airflow-providers-ssh
  pip:
    name: apache-airflow-providers-ssh
    state: "{{ airflow_setup_state }}"
    executable: pip

- name: Check if port {{ airflow_web_port }} is listening
  wait_for:
    port: "{{ airflow_web_port }}"
    delay: 2
    timeout: 5
    msg: "Timeout waiting for {{ airflow_web_port }} to respond"
  register: _r_airflow_web_port
  ignore_errors: yes
  when:
    - airflow_setup_state == "present"

- name: Copy custom airflow configuration file to airflow home
  template:
    src: "airflow.cfg.j2"
    dest: "{{ airflow_home }}/airflow.cfg"
    mode: 0640
  register: _r_airflow_template
  when:
    - airflow_setup_state == "present"

- name: Initiate airflow db
  shell: |
         airflow db init
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
  when:
    - _r_airflow_web_port.failed is defined
    - _r_airflow_web_port.failed
    - airflow_setup_state == "present"

- name: Create airflow webserver systemd script     
  template: 
    src: "airflow.service.j2"
    dest: "/lib/systemd/system/airflow.service"
    mode: 0755
  when:
    - airflow_setup_state == "present"

- name: Create airflow scheduler systemd script
  template:
    src: "airflow-scheduler.service.j2"
    dest: "/lib/systemd/system/airflow-scheduler.service"
    mode: 0755
  when:
    - airflow_setup_state == "present"
      
- name: Daemon reload after adding a new service script 
  systemd:
    daemon_reload: true
  when:
    - airflow_setup_state == "present"

- name: Start airflow webserver using systemd service script & auto start on server startup
  systemd:
    name: airflow
    state: started
    enabled: true
  when:
    - airflow_setup_state == "present"

- name: Start airflow scheduler using systemd service script & auto start on server startup
  systemd:
    name: airflow-scheduler
    state: started
    enabled: true
  when:
    - airflow_setup_state == "present"

- name: Create Airflow user
  command: "airflow users create --role Admin --username {{ item.username }} --email {{ item.email }} --firstname {{ item.firstname }} --lastname {{ item.lastname }} --password {{ item.password }}"
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
  with_items:
    - "{{ airflow_default_users }}"
  when:
    - airflow_setup_state == "present"
